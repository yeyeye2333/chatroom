// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatroom.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_chatroom_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_chatroom_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_chatroom_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_chatroom_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_chatroom_2eproto;
namespace chatroom {
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Group_uid;
struct Group_uidDefaultTypeInternal;
extern Group_uidDefaultTypeInternal _Group_uid_default_instance_;
class Head;
struct HeadDefaultTypeInternal;
extern HeadDefaultTypeInternal _Head_default_instance_;
class IDs;
struct IDsDefaultTypeInternal;
extern IDsDefaultTypeInternal _IDs_default_instance_;
class Login_info;
struct Login_infoDefaultTypeInternal;
extern Login_infoDefaultTypeInternal _Login_info_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Signup_info;
struct Signup_infoDefaultTypeInternal;
extern Signup_infoDefaultTypeInternal _Signup_info_default_instance_;
class Strs;
struct StrsDefaultTypeInternal;
extern StrsDefaultTypeInternal _Strs_default_instance_;
}  // namespace chatroom
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace chatroom {
enum Type : int {
  nothing = 0,
  login = 1,
  signup = 2,
  logout = 3,
  u_search = 4,
  u_request = 5,
  u_listreq = 6,
  u_add = 7,
  u_del = 8,
  u_blok = 9,
  u_unblok = 10,
  u_message = 11,
  u_file = 12,
  u_m_history = 13,
  u_f_history0 = 14,
  u_f_history1 = 15,
  g_create = 16,
  g_disban = 17,
  g_request = 18,
  g_listreq = 19,
  g_add = 20,
  g_del = 21,
  g_search = 22,
  g_message = 23,
  g_file = 24,
  g_quit = 25,
  g_members = 26,
  g_addmanager = 27,
  g_delmanager = 28,
  g_m_history = 29,
  g_f_history0 = 30,
  g_f_history1 = 31,
  notify_u_req = 32,
  notify_u_m = 33,
  notify_u_f = 34,
  notify_g_req = 35,
  notify_g_m = 36,
  notify_g_f = 37,
  g_confirm = 38,
  fri_confirm = 39,
  heart_check = 40,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Type_IsValid(int value);
extern const uint32_t Type_internal_data_[];
constexpr Type Type_MIN = static_cast<Type>(0);
constexpr Type Type_MAX = static_cast<Type>(40);
constexpr int Type_ARRAYSIZE = 40 + 1;
const ::google::protobuf::EnumDescriptor*
Type_descriptor();
template <typename T>
const std::string& Type_Name(T value) {
  static_assert(std::is_same<T, Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
template <>
inline const std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Type_descriptor,
                                                 0, 40>(
      static_cast<int>(value));
}
inline bool Type_Parse(absl::string_view name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
      Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Strs final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatroom.Strs) */ {
 public:
  inline Strs() : Strs(nullptr) {}
  ~Strs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Strs(::google::protobuf::internal::ConstantInitialized);

  inline Strs(const Strs& from)
      : Strs(nullptr, from) {}
  Strs(Strs&& from) noexcept
    : Strs() {
    *this = ::std::move(from);
  }

  inline Strs& operator=(const Strs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Strs& operator=(Strs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Strs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Strs* internal_default_instance() {
    return reinterpret_cast<const Strs*>(
               &_Strs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Strs& a, Strs& b) {
    a.Swap(&b);
  }
  inline void Swap(Strs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Strs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Strs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Strs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Strs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Strs& from) {
    Strs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Strs* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chatroom.Strs";
  }
  protected:
  explicit Strs(::google::protobuf::Arena* arena);
  Strs(::google::protobuf::Arena* arena, const Strs& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
  };
  // repeated string str = 1;
  int str_size() const;
  private:
  int _internal_str_size() const;

  public:
  void clear_str() ;
  const std::string& str(int index) const;
  std::string* mutable_str(int index);
  void set_str(int index, const std::string& value);
  void set_str(int index, std::string&& value);
  void set_str(int index, const char* value);
  void set_str(int index, const char* value, std::size_t size);
  void set_str(int index, absl::string_view value);
  std::string* add_str();
  void add_str(const std::string& value);
  void add_str(std::string&& value);
  void add_str(const char* value);
  void add_str(const char* value, std::size_t size);
  void add_str(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& str() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_str();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_str() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_str();

  public:
  // @@protoc_insertion_point(class_scope:chatroom.Strs)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      25, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> str_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chatroom_2eproto;
};// -------------------------------------------------------------------

class Signup_info final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatroom.Signup_info) */ {
 public:
  inline Signup_info() : Signup_info(nullptr) {}
  ~Signup_info() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Signup_info(::google::protobuf::internal::ConstantInitialized);

  inline Signup_info(const Signup_info& from)
      : Signup_info(nullptr, from) {}
  Signup_info(Signup_info&& from) noexcept
    : Signup_info() {
    *this = ::std::move(from);
  }

  inline Signup_info& operator=(const Signup_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signup_info& operator=(Signup_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signup_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signup_info* internal_default_instance() {
    return reinterpret_cast<const Signup_info*>(
               &_Signup_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Signup_info& a, Signup_info& b) {
    a.Swap(&b);
  }
  inline void Swap(Signup_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signup_info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signup_info* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signup_info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Signup_info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Signup_info& from) {
    Signup_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Signup_info* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chatroom.Signup_info";
  }
  protected:
  explicit Signup_info(::google::protobuf::Arena* arena);
  Signup_info(::google::protobuf::Arena* arena, const Signup_info& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string password = 3;
  bool has_password() const;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid() ;
  ::int32_t uid() const;
  void set_uid(::int32_t value);

  private:
  ::int32_t _internal_uid() const;
  void _internal_set_uid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chatroom.Signup_info)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::int32_t uid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chatroom_2eproto;
};// -------------------------------------------------------------------

class Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatroom.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Message(::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from)
      : Message(nullptr, from) {}
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chatroom.Message";
  }
  protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
    kContextFieldNumber = 2,
    kDateFieldNumber = 3,
    kGidFieldNumber = 4,
  };
  // repeated int32 obj = 1;
  int obj_size() const;
  private:
  int _internal_obj_size() const;

  public:
  void clear_obj() ;
  ::int32_t obj(int index) const;
  void set_obj(int index, ::int32_t value);
  void add_obj(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& obj() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_obj();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_obj() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_obj();

  public:
  // repeated string context = 2;
  int context_size() const;
  private:
  int _internal_context_size() const;

  public:
  void clear_context() ;
  const std::string& context(int index) const;
  std::string* mutable_context(int index);
  void set_context(int index, const std::string& value);
  void set_context(int index, std::string&& value);
  void set_context(int index, const char* value);
  void set_context(int index, const char* value, std::size_t size);
  void set_context(int index, absl::string_view value);
  std::string* add_context();
  void add_context(const std::string& value);
  void add_context(std::string&& value);
  void add_context(const char* value);
  void add_context(const char* value, std::size_t size);
  void add_context(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& context() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_context();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_context() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_context();

  public:
  // repeated string date = 3;
  int date_size() const;
  private:
  int _internal_date_size() const;

  public:
  void clear_date() ;
  const std::string& date(int index) const;
  std::string* mutable_date(int index);
  void set_date(int index, const std::string& value);
  void set_date(int index, std::string&& value);
  void set_date(int index, const char* value);
  void set_date(int index, const char* value, std::size_t size);
  void set_date(int index, absl::string_view value);
  std::string* add_date();
  void add_date(const std::string& value);
  void add_date(std::string&& value);
  void add_date(const char* value);
  void add_date(const char* value, std::size_t size);
  void add_date(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& date() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_date();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_date() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_date();

  public:
  // optional int32 gid = 4;
  bool has_gid() const;
  void clear_gid() ;
  ::int32_t gid() const;
  void set_gid(::int32_t value);

  private:
  ::int32_t _internal_gid() const;
  void _internal_set_gid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chatroom.Message)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> obj_;
    mutable ::google::protobuf::internal::CachedSize _obj_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> context_;
    ::google::protobuf::RepeatedPtrField<std::string> date_;
    ::int32_t gid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chatroom_2eproto;
};// -------------------------------------------------------------------

class Login_info final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatroom.Login_info) */ {
 public:
  inline Login_info() : Login_info(nullptr) {}
  ~Login_info() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Login_info(::google::protobuf::internal::ConstantInitialized);

  inline Login_info(const Login_info& from)
      : Login_info(nullptr, from) {}
  Login_info(Login_info&& from) noexcept
    : Login_info() {
    *this = ::std::move(from);
  }

  inline Login_info& operator=(const Login_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_info& operator=(Login_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login_info* internal_default_instance() {
    return reinterpret_cast<const Login_info*>(
               &_Login_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Login_info& a, Login_info& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login_info* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login_info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Login_info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Login_info& from) {
    Login_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Login_info* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chatroom.Login_info";
  }
  protected:
  explicit Login_info(::google::protobuf::Arena* arena);
  Login_info(::google::protobuf::Arena* arena, const Login_info& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // optional string password = 2;
  bool has_password() const;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid() ;
  ::int32_t uid() const;
  void set_uid(::int32_t value);

  private:
  ::int32_t _internal_uid() const;
  void _internal_set_uid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chatroom.Login_info)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::int32_t uid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chatroom_2eproto;
};// -------------------------------------------------------------------

class IDs final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatroom.IDs) */ {
 public:
  inline IDs() : IDs(nullptr) {}
  ~IDs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IDs(::google::protobuf::internal::ConstantInitialized);

  inline IDs(const IDs& from)
      : IDs(nullptr, from) {}
  IDs(IDs&& from) noexcept
    : IDs() {
    *this = ::std::move(from);
  }

  inline IDs& operator=(const IDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDs& operator=(IDs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IDs& default_instance() {
    return *internal_default_instance();
  }
  static inline const IDs* internal_default_instance() {
    return reinterpret_cast<const IDs*>(
               &_IDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IDs& a, IDs& b) {
    a.Swap(&b);
  }
  inline void Swap(IDs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IDs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IDs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IDs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IDs& from) {
    IDs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IDs* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chatroom.IDs";
  }
  protected:
  explicit IDs(::google::protobuf::Arena* arena);
  IDs(::google::protobuf::Arena* arena, const IDs& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated int32 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  ::int32_t id(int index) const;
  void set_id(int index, ::int32_t value);
  void add_id(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& id() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_id();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_id() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:chatroom.IDs)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> id_;
    mutable ::google::protobuf::internal::CachedSize _id_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chatroom_2eproto;
};// -------------------------------------------------------------------

class Head final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatroom.Head) */ {
 public:
  inline Head() : Head(nullptr) {}
  ~Head() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Head(::google::protobuf::internal::ConstantInitialized);

  inline Head(const Head& from)
      : Head(nullptr, from) {}
  Head(Head&& from) noexcept
    : Head() {
    *this = ::std::move(from);
  }

  inline Head& operator=(const Head& from) {
    CopyFrom(from);
    return *this;
  }
  inline Head& operator=(Head&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Head& default_instance() {
    return *internal_default_instance();
  }
  static inline const Head* internal_default_instance() {
    return reinterpret_cast<const Head*>(
               &_Head_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Head& a, Head& b) {
    a.Swap(&b);
  }
  inline void Swap(Head* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Head* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Head* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Head>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Head& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Head& from) {
    Head::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Head* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chatroom.Head";
  }
  protected:
  explicit Head(::google::protobuf::Arena* arena);
  Head(::google::protobuf::Arena* arena, const Head& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLenFieldNumber = 3,
  };
  // optional bool is = 1;
  bool has_is() const;
  void clear_is() ;
  bool is() const;
  void set_is(bool value);

  private:
  bool _internal_is() const;
  void _internal_set_is(bool value);

  public:
  // optional .chatroom.Type type = 2;
  bool has_type() const;
  void clear_type() ;
  ::chatroom::Type type() const;
  void set_type(::chatroom::Type value);

  private:
  ::chatroom::Type _internal_type() const;
  void _internal_set_type(::chatroom::Type value);

  public:
  // optional int32 len = 3;
  bool has_len() const;
  void clear_len() ;
  ::int32_t len() const;
  void set_len(::int32_t value);

  private:
  ::int32_t _internal_len() const;
  void _internal_set_len(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chatroom.Head)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool is_;
    int type_;
    ::int32_t len_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chatroom_2eproto;
};// -------------------------------------------------------------------

class Group_uid final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatroom.Group_uid) */ {
 public:
  inline Group_uid() : Group_uid(nullptr) {}
  ~Group_uid() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Group_uid(::google::protobuf::internal::ConstantInitialized);

  inline Group_uid(const Group_uid& from)
      : Group_uid(nullptr, from) {}
  Group_uid(Group_uid&& from) noexcept
    : Group_uid() {
    *this = ::std::move(from);
  }

  inline Group_uid& operator=(const Group_uid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group_uid& operator=(Group_uid&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Group_uid& default_instance() {
    return *internal_default_instance();
  }
  static inline const Group_uid* internal_default_instance() {
    return reinterpret_cast<const Group_uid*>(
               &_Group_uid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Group_uid& a, Group_uid& b) {
    a.Swap(&b);
  }
  inline void Swap(Group_uid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group_uid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Group_uid* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Group_uid>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Group_uid& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Group_uid& from) {
    Group_uid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Group_uid* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chatroom.Group_uid";
  }
  protected:
  explicit Group_uid(::google::protobuf::Arena* arena);
  Group_uid(::google::protobuf::Arena* arena, const Group_uid& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid() ;
  ::int32_t uid() const;
  void set_uid(::int32_t value);

  private:
  ::int32_t _internal_uid() const;
  void _internal_set_uid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chatroom.Group_uid)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      31, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t uid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chatroom_2eproto;
};// -------------------------------------------------------------------

class File final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatroom.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR File(::google::protobuf::internal::ConstantInitialized);

  inline File(const File& from)
      : File(nullptr, from) {}
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const File& from) {
    File::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(File* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chatroom.File";
  }
  protected:
  explicit File(::google::protobuf::Arena* arena);
  File(::google::protobuf::Arena* arena, const File& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
    kNameFieldNumber = 2,
    kDateFieldNumber = 4,
    kLenFieldNumber = 5,
    kGidFieldNumber = 6,
  };
  // repeated int32 obj = 1;
  int obj_size() const;
  private:
  int _internal_obj_size() const;

  public:
  void clear_obj() ;
  ::int32_t obj(int index) const;
  void set_obj(int index, ::int32_t value);
  void add_obj(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& obj() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_obj();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_obj() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_obj();

  public:
  // repeated string name = 2;
  int name_size() const;
  private:
  int _internal_name_size() const;

  public:
  void clear_name() ;
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, std::size_t size);
  void set_name(int index, absl::string_view value);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, std::size_t size);
  void add_name(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& name() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_name();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_name() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_name();

  public:
  // repeated string date = 4;
  int date_size() const;
  private:
  int _internal_date_size() const;

  public:
  void clear_date() ;
  const std::string& date(int index) const;
  std::string* mutable_date(int index);
  void set_date(int index, const std::string& value);
  void set_date(int index, std::string&& value);
  void set_date(int index, const char* value);
  void set_date(int index, const char* value, std::size_t size);
  void set_date(int index, absl::string_view value);
  std::string* add_date();
  void add_date(const std::string& value);
  void add_date(std::string&& value);
  void add_date(const char* value);
  void add_date(const char* value, std::size_t size);
  void add_date(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& date() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_date();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_date() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_date();

  public:
  // repeated int64 len = 5;
  int len_size() const;
  private:
  int _internal_len_size() const;

  public:
  void clear_len() ;
  ::int64_t len(int index) const;
  void set_len(int index, ::int64_t value);
  void add_len(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& len() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_len();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_len() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_len();

  public:
  // optional int32 gid = 6;
  bool has_gid() const;
  void clear_gid() ;
  ::int32_t gid() const;
  void set_gid(::int32_t value);

  private:
  ::int32_t _internal_gid() const;
  void _internal_set_gid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chatroom.File)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      30, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> obj_;
    mutable ::google::protobuf::internal::CachedSize _obj_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> name_;
    ::google::protobuf::RepeatedPtrField<std::string> date_;
    ::google::protobuf::RepeatedField<::int64_t> len_;
    mutable ::google::protobuf::internal::CachedSize _len_cached_byte_size_;
    ::int32_t gid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chatroom_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Head

// optional bool is = 1;
inline bool Head::has_is() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Head::clear_is() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Head::is() const {
  // @@protoc_insertion_point(field_get:chatroom.Head.is)
  return _internal_is();
}
inline void Head::set_is(bool value) {
  _internal_set_is(value);
  // @@protoc_insertion_point(field_set:chatroom.Head.is)
}
inline bool Head::_internal_is() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_;
}
inline void Head::_internal_set_is(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_ = value;
}

// optional .chatroom.Type type = 2;
inline bool Head::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Head::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::chatroom::Type Head::type() const {
  // @@protoc_insertion_point(field_get:chatroom.Head.type)
  return _internal_type();
}
inline void Head::set_type(::chatroom::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chatroom.Head.type)
}
inline ::chatroom::Type Head::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::chatroom::Type>(_impl_.type_);
}
inline void Head::_internal_set_type(::chatroom::Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}

// optional int32 len = 3;
inline bool Head::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Head::clear_len() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Head::len() const {
  // @@protoc_insertion_point(field_get:chatroom.Head.len)
  return _internal_len();
}
inline void Head::set_len(::int32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:chatroom.Head.len)
}
inline ::int32_t Head::_internal_len() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.len_;
}
inline void Head::_internal_set_len(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// File

// repeated int32 obj = 1;
inline int File::_internal_obj_size() const {
  return _internal_obj().size();
}
inline int File::obj_size() const {
  return _internal_obj_size();
}
inline void File::clear_obj() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.obj_.Clear();
}
inline ::int32_t File::obj(int index) const {
  // @@protoc_insertion_point(field_get:chatroom.File.obj)
  return _internal_obj().Get(index);
}
inline void File::set_obj(int index, ::int32_t value) {
  _internal_mutable_obj()->Set(index, value);
  // @@protoc_insertion_point(field_set:chatroom.File.obj)
}
inline void File::add_obj(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_obj()->Add(value);
  // @@protoc_insertion_point(field_add:chatroom.File.obj)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& File::obj() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chatroom.File.obj)
  return _internal_obj();
}
inline ::google::protobuf::RepeatedField<::int32_t>* File::mutable_obj()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chatroom.File.obj)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_obj();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& File::_internal_obj()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.obj_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* File::_internal_mutable_obj() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.obj_;
}

// repeated string name = 2;
inline int File::_internal_name_size() const {
  return _internal_name().size();
}
inline int File::name_size() const {
  return _internal_name_size();
}
inline void File::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Clear();
}
inline std::string* File::add_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_name()->Add();
  // @@protoc_insertion_point(field_add_mutable:chatroom.File.name)
  return _s;
}
inline const std::string& File::name(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chatroom.File.name)
  return _internal_name().Get(index);
}
inline std::string* File::mutable_name(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chatroom.File.name)
  return _internal_mutable_name()->Mutable(index);
}
inline void File::set_name(int index, const std::string& value) {
  _internal_mutable_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chatroom.File.name)
}
inline void File::set_name(int index, std::string&& value) {
  _internal_mutable_name()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chatroom.File.name)
}
inline void File::set_name(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chatroom.File.name)
}
inline void File::set_name(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_name()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chatroom.File.name)
}
inline void File::set_name(int index, absl::string_view value) {
  _internal_mutable_name()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:chatroom.File.name)
}
inline void File::add_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:chatroom.File.name)
}
inline void File::add_name(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_name()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:chatroom.File.name)
}
inline void File::add_name(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chatroom.File.name)
}
inline void File::add_name(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_name()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chatroom.File.name)
}
inline void File::add_name(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_name()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:chatroom.File.name)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
File::name() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chatroom.File.name)
  return _internal_name();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
File::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chatroom.File.name)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_name();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
File::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
File::_internal_mutable_name() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.name_;
}

// repeated string date = 4;
inline int File::_internal_date_size() const {
  return _internal_date().size();
}
inline int File::date_size() const {
  return _internal_date_size();
}
inline void File::clear_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.date_.Clear();
}
inline std::string* File::add_date()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_date()->Add();
  // @@protoc_insertion_point(field_add_mutable:chatroom.File.date)
  return _s;
}
inline const std::string& File::date(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chatroom.File.date)
  return _internal_date().Get(index);
}
inline std::string* File::mutable_date(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chatroom.File.date)
  return _internal_mutable_date()->Mutable(index);
}
inline void File::set_date(int index, const std::string& value) {
  _internal_mutable_date()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chatroom.File.date)
}
inline void File::set_date(int index, std::string&& value) {
  _internal_mutable_date()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chatroom.File.date)
}
inline void File::set_date(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_date()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chatroom.File.date)
}
inline void File::set_date(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_date()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chatroom.File.date)
}
inline void File::set_date(int index, absl::string_view value) {
  _internal_mutable_date()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:chatroom.File.date)
}
inline void File::add_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:chatroom.File.date)
}
inline void File::add_date(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:chatroom.File.date)
}
inline void File::add_date(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chatroom.File.date)
}
inline void File::add_date(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chatroom.File.date)
}
inline void File::add_date(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:chatroom.File.date)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
File::date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chatroom.File.date)
  return _internal_date();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
File::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chatroom.File.date)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_date();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
File::_internal_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.date_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
File::_internal_mutable_date() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.date_;
}

// repeated int64 len = 5;
inline int File::_internal_len_size() const {
  return _internal_len().size();
}
inline int File::len_size() const {
  return _internal_len_size();
}
inline void File::clear_len() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_.Clear();
}
inline ::int64_t File::len(int index) const {
  // @@protoc_insertion_point(field_get:chatroom.File.len)
  return _internal_len().Get(index);
}
inline void File::set_len(int index, ::int64_t value) {
  _internal_mutable_len()->Set(index, value);
  // @@protoc_insertion_point(field_set:chatroom.File.len)
}
inline void File::add_len(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_len()->Add(value);
  // @@protoc_insertion_point(field_add:chatroom.File.len)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& File::len() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chatroom.File.len)
  return _internal_len();
}
inline ::google::protobuf::RepeatedField<::int64_t>* File::mutable_len()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chatroom.File.len)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_len();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& File::_internal_len()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.len_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* File::_internal_mutable_len() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.len_;
}

// optional int32 gid = 6;
inline bool File::has_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void File::clear_gid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t File::gid() const {
  // @@protoc_insertion_point(field_get:chatroom.File.gid)
  return _internal_gid();
}
inline void File::set_gid(::int32_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:chatroom.File.gid)
}
inline ::int32_t File::_internal_gid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gid_;
}
inline void File::_internal_set_gid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gid_ = value;
}

// -------------------------------------------------------------------

// Message

// repeated int32 obj = 1;
inline int Message::_internal_obj_size() const {
  return _internal_obj().size();
}
inline int Message::obj_size() const {
  return _internal_obj_size();
}
inline void Message::clear_obj() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.obj_.Clear();
}
inline ::int32_t Message::obj(int index) const {
  // @@protoc_insertion_point(field_get:chatroom.Message.obj)
  return _internal_obj().Get(index);
}
inline void Message::set_obj(int index, ::int32_t value) {
  _internal_mutable_obj()->Set(index, value);
  // @@protoc_insertion_point(field_set:chatroom.Message.obj)
}
inline void Message::add_obj(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_obj()->Add(value);
  // @@protoc_insertion_point(field_add:chatroom.Message.obj)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message::obj() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chatroom.Message.obj)
  return _internal_obj();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message::mutable_obj()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chatroom.Message.obj)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_obj();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message::_internal_obj()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.obj_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message::_internal_mutable_obj() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.obj_;
}

// repeated string context = 2;
inline int Message::_internal_context_size() const {
  return _internal_context().size();
}
inline int Message::context_size() const {
  return _internal_context_size();
}
inline void Message::clear_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.context_.Clear();
}
inline std::string* Message::add_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_context()->Add();
  // @@protoc_insertion_point(field_add_mutable:chatroom.Message.context)
  return _s;
}
inline const std::string& Message::context(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chatroom.Message.context)
  return _internal_context().Get(index);
}
inline std::string* Message::mutable_context(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chatroom.Message.context)
  return _internal_mutable_context()->Mutable(index);
}
inline void Message::set_context(int index, const std::string& value) {
  _internal_mutable_context()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chatroom.Message.context)
}
inline void Message::set_context(int index, std::string&& value) {
  _internal_mutable_context()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chatroom.Message.context)
}
inline void Message::set_context(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_context()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chatroom.Message.context)
}
inline void Message::set_context(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_context()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chatroom.Message.context)
}
inline void Message::set_context(int index, absl::string_view value) {
  _internal_mutable_context()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:chatroom.Message.context)
}
inline void Message::add_context(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:chatroom.Message.context)
}
inline void Message::add_context(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:chatroom.Message.context)
}
inline void Message::add_context(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chatroom.Message.context)
}
inline void Message::add_context(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chatroom.Message.context)
}
inline void Message::add_context(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:chatroom.Message.context)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message::context() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chatroom.Message.context)
  return _internal_context();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message::mutable_context() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chatroom.Message.context)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_context();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message::_internal_context() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.context_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message::_internal_mutable_context() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.context_;
}

// repeated string date = 3;
inline int Message::_internal_date_size() const {
  return _internal_date().size();
}
inline int Message::date_size() const {
  return _internal_date_size();
}
inline void Message::clear_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.date_.Clear();
}
inline std::string* Message::add_date()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_date()->Add();
  // @@protoc_insertion_point(field_add_mutable:chatroom.Message.date)
  return _s;
}
inline const std::string& Message::date(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chatroom.Message.date)
  return _internal_date().Get(index);
}
inline std::string* Message::mutable_date(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chatroom.Message.date)
  return _internal_mutable_date()->Mutable(index);
}
inline void Message::set_date(int index, const std::string& value) {
  _internal_mutable_date()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chatroom.Message.date)
}
inline void Message::set_date(int index, std::string&& value) {
  _internal_mutable_date()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chatroom.Message.date)
}
inline void Message::set_date(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_date()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chatroom.Message.date)
}
inline void Message::set_date(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_date()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chatroom.Message.date)
}
inline void Message::set_date(int index, absl::string_view value) {
  _internal_mutable_date()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:chatroom.Message.date)
}
inline void Message::add_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:chatroom.Message.date)
}
inline void Message::add_date(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:chatroom.Message.date)
}
inline void Message::add_date(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chatroom.Message.date)
}
inline void Message::add_date(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chatroom.Message.date)
}
inline void Message::add_date(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:chatroom.Message.date)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message::date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chatroom.Message.date)
  return _internal_date();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chatroom.Message.date)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_date();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message::_internal_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.date_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message::_internal_mutable_date() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.date_;
}

// optional int32 gid = 4;
inline bool Message::has_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message::clear_gid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message::gid() const {
  // @@protoc_insertion_point(field_get:chatroom.Message.gid)
  return _internal_gid();
}
inline void Message::set_gid(::int32_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:chatroom.Message.gid)
}
inline ::int32_t Message::_internal_gid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gid_;
}
inline void Message::_internal_set_gid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gid_ = value;
}

// -------------------------------------------------------------------

// Signup_info

// optional int32 uid = 1;
inline bool Signup_info::has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Signup_info::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Signup_info::uid() const {
  // @@protoc_insertion_point(field_get:chatroom.Signup_info.uid)
  return _internal_uid();
}
inline void Signup_info::set_uid(::int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:chatroom.Signup_info.uid)
}
inline ::int32_t Signup_info::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_;
}
inline void Signup_info::_internal_set_uid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uid_ = value;
}

// optional string name = 2;
inline bool Signup_info::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Signup_info::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Signup_info::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chatroom.Signup_info.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signup_info::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chatroom.Signup_info.name)
}
inline std::string* Signup_info::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chatroom.Signup_info.name)
  return _s;
}
inline const std::string& Signup_info::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Signup_info::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Signup_info::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Signup_info::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chatroom.Signup_info.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Signup_info::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chatroom.Signup_info.name)
}

// optional string password = 3;
inline bool Signup_info::has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Signup_info::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Signup_info::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chatroom.Signup_info.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signup_info::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chatroom.Signup_info.password)
}
inline std::string* Signup_info::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:chatroom.Signup_info.password)
  return _s;
}
inline const std::string& Signup_info::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void Signup_info::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* Signup_info::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* Signup_info::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chatroom.Signup_info.password)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.password_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Signup_info::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chatroom.Signup_info.password)
}

// -------------------------------------------------------------------

// Login_info

// optional int32 uid = 1;
inline bool Login_info::has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Login_info::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Login_info::uid() const {
  // @@protoc_insertion_point(field_get:chatroom.Login_info.uid)
  return _internal_uid();
}
inline void Login_info::set_uid(::int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:chatroom.Login_info.uid)
}
inline ::int32_t Login_info::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_;
}
inline void Login_info::_internal_set_uid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uid_ = value;
}

// optional string password = 2;
inline bool Login_info::has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Login_info::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Login_info::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chatroom.Login_info.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Login_info::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chatroom.Login_info.password)
}
inline std::string* Login_info::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:chatroom.Login_info.password)
  return _s;
}
inline const std::string& Login_info::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void Login_info::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* Login_info::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* Login_info::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chatroom.Login_info.password)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.password_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Login_info::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chatroom.Login_info.password)
}

// -------------------------------------------------------------------

// Group_uid

// optional int32 uid = 1;
inline bool Group_uid::has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Group_uid::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Group_uid::uid() const {
  // @@protoc_insertion_point(field_get:chatroom.Group_uid.uid)
  return _internal_uid();
}
inline void Group_uid::set_uid(::int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:chatroom.Group_uid.uid)
}
inline ::int32_t Group_uid::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_;
}
inline void Group_uid::_internal_set_uid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uid_ = value;
}

// optional string name = 2;
inline bool Group_uid::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Group_uid::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Group_uid::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chatroom.Group_uid.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Group_uid::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chatroom.Group_uid.name)
}
inline std::string* Group_uid::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chatroom.Group_uid.name)
  return _s;
}
inline const std::string& Group_uid::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Group_uid::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Group_uid::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Group_uid::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chatroom.Group_uid.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Group_uid::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chatroom.Group_uid.name)
}

// -------------------------------------------------------------------

// IDs

// repeated int32 id = 1;
inline int IDs::_internal_id_size() const {
  return _internal_id().size();
}
inline int IDs::id_size() const {
  return _internal_id_size();
}
inline void IDs::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Clear();
}
inline ::int32_t IDs::id(int index) const {
  // @@protoc_insertion_point(field_get:chatroom.IDs.id)
  return _internal_id().Get(index);
}
inline void IDs::set_id(int index, ::int32_t value) {
  _internal_mutable_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:chatroom.IDs.id)
}
inline void IDs::add_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_id()->Add(value);
  // @@protoc_insertion_point(field_add:chatroom.IDs.id)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& IDs::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chatroom.IDs.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedField<::int32_t>* IDs::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chatroom.IDs.id)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& IDs::_internal_id()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* IDs::_internal_mutable_id() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.id_;
}

// -------------------------------------------------------------------

// Strs

// repeated string str = 1;
inline int Strs::_internal_str_size() const {
  return _internal_str().size();
}
inline int Strs::str_size() const {
  return _internal_str_size();
}
inline void Strs::clear_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.str_.Clear();
}
inline std::string* Strs::add_str()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_str()->Add();
  // @@protoc_insertion_point(field_add_mutable:chatroom.Strs.str)
  return _s;
}
inline const std::string& Strs::str(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chatroom.Strs.str)
  return _internal_str().Get(index);
}
inline std::string* Strs::mutable_str(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chatroom.Strs.str)
  return _internal_mutable_str()->Mutable(index);
}
inline void Strs::set_str(int index, const std::string& value) {
  _internal_mutable_str()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chatroom.Strs.str)
}
inline void Strs::set_str(int index, std::string&& value) {
  _internal_mutable_str()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chatroom.Strs.str)
}
inline void Strs::set_str(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_str()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chatroom.Strs.str)
}
inline void Strs::set_str(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_str()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chatroom.Strs.str)
}
inline void Strs::set_str(int index, absl::string_view value) {
  _internal_mutable_str()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:chatroom.Strs.str)
}
inline void Strs::add_str(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_str()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:chatroom.Strs.str)
}
inline void Strs::add_str(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_str()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:chatroom.Strs.str)
}
inline void Strs::add_str(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_str()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chatroom.Strs.str)
}
inline void Strs::add_str(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_str()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chatroom.Strs.str)
}
inline void Strs::add_str(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_str()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:chatroom.Strs.str)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Strs::str() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chatroom.Strs.str)
  return _internal_str();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Strs::mutable_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chatroom.Strs.str)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_str();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Strs::_internal_str() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.str_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Strs::_internal_mutable_str() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.str_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace chatroom


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::chatroom::Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::chatroom::Type>() {
  return ::chatroom::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_chatroom_2eproto_2epb_2eh
